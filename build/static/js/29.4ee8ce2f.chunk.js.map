{"version":3,"sources":["app/hooks/useStore.js","app/utils/convertToDayId.js","app/utils/convertToDate.js","app/views/charts/echarts/LineChartTotalStakePerDay.jsx","app/views/charts/echarts/ComparisonChartTotalStakePerDay.jsx","app/views/charts/echarts/LineChartTotalStakes.jsx","app/views/charts/echarts/TotalRewardsAndTotalDistributedChart.jsx","app/views/charts/echarts/MelaliePerDayChart.jsx"],"names":["_dataStore","convertToDayId","date","parseInt","fetchStakesPerDay","startDate","endDate","query","client","createClient","url","stakesMap","Map","i","set","id","stakeCreatedCount","stakeCreatedSum","stakeRemovedCount","stakeRemovedSum","totalStake","totalRewards","totalDistributions","toPromise","response","console","log","returnedModel","entries","key","foundData","_","find","data","melaliePerDays","item","toString","undefined","push","get","DataModel","types","model","dayId","optional","string","DataStore","Date","setDate","getDate","stakesPerDayData","array","actions","store","setStakesPerDayData","newData","setPeriod","fetchStakesPerDayData","_startDate","_endDate","map","d","useStore","create","convertToDate","day","toDateString","LineChartTotalStakePerDay","observer","height","color","dataStore","theme","useTheme","useState","ourDays","setOurDays","setStakeCreatedSum","setStakeRemovedSum","useEffect","getData","days","stakeCreatedSumArr","stakeRemovedSumArr","index","length","element","newDate","convertedStakeCreatedSum","ethers","utils","formatEther","ourStakeCreatedSum","Number","toFixed","convertedStakeRemovedSum","ourStakeRemovedSum","moment","format","option","grid","top","bottom","left","right","legend","itemGap","icon","textStyle","palette","text","secondary","fontSize","fontFamily","tooltip","xAxis","type","axisLine","show","axisTick","axisLabel","yAxis","splitLine","lineStyle","opacity","series","stack","name","smooth","symbolSize","width","style","ComparisonChartTotalStakePerDay","LineChartTotalStakes","totalStakes","setTotalStakes","totalStakesArr","convertedTotalStakes","ourTotalStakes","TotalRewardsAndTotalDistributedChart","setTotalRewards","setTotalDistributions","totalRewardsArr","totalDistributionsArr","convertedTotalRewards","ourTotalRewards","convertedTotalDistributionsArr","ourTotalTotalDistributionsArr","Container","styled","margin","breakpoints","down","marginBottom","MelaliePerDayChart","className","Breadcrumb","routeSegments","path","Box","sx","py","SimpleCard","title","primary","dark","light","main"],"mappings":"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","file":"static/js/29.4ee8ce2f.chunk.js","sourcesContent":["import { createClient } from \"urql\";\nimport _ from \"lodash\";\nimport { convertToDayId } from \"../utils/convertToDayId\";\nimport { types } from \"mobx-state-tree\";\n\nconst URL = \"https://api.thegraph.com/subgraphs/name/lekg1/melaliebasic01\";\n\nconst fetchStakesPerDay = async (startDate, endDate) => {\n  const query = `\n        query {\n          melaliePerDays(\n              where: { id_gte: ${convertToDayId(startDate)} id_lte: ${convertToDayId( endDate )} },\n        orderBy: id, \n        orderDirection: asc\n        ) {\n          id\n          stakeCreatedCount\n          stakeCreatedSum\n          stakeRemovedCount\n          stakeRemovedSum\n          totalStake\n          totalRewards\n          totalDistributions\n        }\n      }`;\n\n  const client = createClient({ url: URL, });\n\n  let stakesMap = new Map();\n  for (let i = convertToDayId(startDate); i <= convertToDayId(endDate); i++) {\n    stakesMap.set(i, {\n      id: i,\n      stakeCreatedCount: 0,\n      stakeCreatedSum: 0,\n      stakeRemovedCount: 0,\n      stakeRemovedSum: 0,\n      totalStake: 0,\n      totalRewards: 0,\n      totalDistributions: 0\n    });\n  }\n  const response = await client.query(query).toPromise();\n  console.log(\"response\", response);\n  const returnedModel = [];\n  for (const [key, value] of stakesMap.entries()) {\n    let foundData = _.find(response.data.melaliePerDays, function (item) {\n      if (item.id === key.toString()) {\n        return true;\n      }\n    });\n    if (foundData !== undefined) returnedModel.push(foundData);\n    else returnedModel.push(stakesMap.get(key));\n  }\n  return returnedModel;\n};\n\n// const fetchStakesPerHour = async (startDate, endDate) => {\n//   const query = `\n// query {\n//     stakePerHours(\n//         where: { id: 5 },\n//         orderBy: id, \n//         orderDirection: asc\n//         ) {\n//           id\n//           stakeCreatedCount\n//           stakeCreatedSum\n//           stakeRemovedCount\n//           stakeRemovedSum\n//         }\n//       }\n//      `;\n\n//   const client = createClient({\n//     url: URL,\n//   });\n\n//   let stakesMap = new Map();\n//   for (let i = convertToDayId(startDate); i <= convertToDayId(endDate); i++) {\n//     stakesMap.set(i, {\n//       id: i,\n//       stakeCreatedCount: 0,\n//       stakeCreatedSum: 0,\n//       stakeRemovedCount: 0,\n//       stakeRemovedSum: 0,\n//     });\n//   }\n//   const response = await client.query(query).toPromise();\n//   console.log(\"response\", response);\n//   const returnedModel = [];\n//   for (const [key, value] of stakesMap.entries()) {\n//     let foundData = _.find(response.data.stakePerDays, function (item) {\n//       if (item.id === key.toString()) {\n//         return true;\n//       }\n//     });\n//     if (foundData !== undefined) returnedModel.push(foundData);\n//     else returnedModel.push(stakesMap.get(key));\n//   }\n//   return returnedModel;\n// };\n\nexport const DataModel = types.model(\"DataModel\", {\n  dayId: types.optional(types.string, \"Not Available\"),\n  stakeCreatedCount: types.optional(types.string, \"Not Available\"),\n  stakeCreatedSum: types.optional(types.string, \"Not Available\"),\n  stakeRemovedCount: types.optional(types.string, \"Not Available\"),\n  stakeRemovedSum: types.optional(types.string, \"Not Available\"),\n  totalStake: types.optional(types.string, \"Not Available\"),\n  totalRewards: types.optional(types.string, \"Not Available\"),\n  totalDistributions: types.optional(types.string, \"Not Available\"),\n});\n\nexport const DataStore = types\n  .model(\"DataStore\", {\n    startDate: new Date().setDate(new Date().getDate() - 60),\n    endDate: new Date(),\n    stakesPerDayData: types.array(DataModel),\n    // stakesPerHourData: types.array(DataModel),\n  })\n  .actions((store) => ({\n    setStakesPerDayData(newData) {\n      store.stakesPerDayData = newData;\n    },\n    // setStakesPerHourData(newData) {\n    //   store.stakesPerHourData = newData;\n    // },\n    setPeriod(startDate, endDate) {\n      store.startDate = startDate;\n      store.endDate = endDate;\n      store.fetchStakesPerDayData();\n      // store.fetchStakesPerHourData();\n    },\n    async fetchStakesPerDayData(_startDate, _endDate) {\n      if(_startDate) store.startDate = _startDate\n      if(_endDate) store.endDate = _endDate\n      const data = await fetchStakesPerDay(store.startDate, store.endDate);\n      const newData = data.map((d) => ({\n        dayId: d.id.toString(),\n        stakeCreatedCount: d.stakeCreatedCount.toString(),\n        stakeCreatedSum: d.stakeCreatedSum.toString(),\n        stakeRemovedCount: d.stakeRemovedCount.toString(),\n        stakeRemovedSum: d.stakeRemovedSum.toString(),\n        totalStake: d.totalStake.toString(),\n        totalRewards: d.totalRewards.toString(),\n        totalDistributions: d.totalDistributions.toString(),\n      }));\n      store.setStakesPerDayData(newData);\n    },\n    // async fetchStakesPerHourData() {\n    //   const data = await fetchStakesPerHour(store.startDate, store.endDate);\n    //   const newData = data.map((d) => ({\n    //     dayId: d.id.toString(),\n    //     stakeCreatedCount: d.stakeCreatedCount.toString(),\n    //     stakeCreatedSum: d.stakeCreatedSum.toString(),\n    //     stakeRemovedCount: d.stakeRemovedCount.toString(),\n    //     stakeRemovedSum: d.stakeRemovedSum.toString(),\n    //   }));\n    //   store.setStakesPerHourData(newData);\n    // },\n  }));\n\nlet _dataStore;\nexport const useStore = () => {\n  if (!_dataStore) {\n    _dataStore = DataStore.create({\n      stakesPerDayData: [],\n      // stakesPerHourData: [],\n    });\n  }\n  return _dataStore;\n};\n","export const convertToDayId = (date) => {\n    const ONE_DAY_IN_SECONDS = 86400;\n    return parseInt(date / ONE_DAY_IN_SECONDS / 1000);\n}","export const convertToDate = (day) => {\n    return new Date(day * 86400 * 1000).toDateString()\n}","import React, { useEffect, useState } from 'react'\nimport { useTheme } from '@mui/system'\nimport ReactEcharts from 'echarts-for-react'\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from 'app/hooks/useStore'\nimport { convertToDate } from 'app/utils/convertToDate'\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/fr';\n\nconst LineChartTotalStakePerDay = observer(({ height, color = [] }) => {\n\n    const dataStore = useStore()\n    const theme = useTheme()\n    const [ourDays, setOurDays] = useState([]);\n    const [stakeCreatedSum, setStakeCreatedSum] = useState([]);\n    const [stakeRemovedSum, setStakeRemovedSum] = useState([]);\n\n    useEffect(() => { \n        const getData = async () => {\n            await dataStore.fetchStakesPerDayData() //TODO pass startDate and endDate here as paramters.\n            let days = [];\n            let stakeCreatedSumArr = [];\n            let stakeRemovedSumArr = [];\n            for (let index = 0; index < dataStore.stakesPerDayData.length; index++) {\n              const element = dataStore.stakesPerDayData[index];\n              const newDate = convertToDate(parseInt(element.dayId));\n              const convertedStakeCreatedSum = ethers.utils.formatEther(element.stakeCreatedSum)\n              const ourStakeCreatedSum = Number(convertedStakeCreatedSum).toFixed(2)\n              const convertedStakeRemovedSum = ethers.utils.formatEther(element.stakeRemovedSum)\n              const ourStakeRemovedSum = Number(convertedStakeRemovedSum).toFixed(2)\n          \n              days.push(moment(newDate).format(\"L\"));\n              stakeCreatedSumArr.push(ourStakeCreatedSum)\n              stakeRemovedSumArr.push(ourStakeRemovedSum)\n            }\n            setOurDays(days)\n            setStakeCreatedSum(stakeCreatedSumArr)\n            setStakeRemovedSum(stakeRemovedSumArr)\n        }\n        getData()\n    /* we have to think about putting dataStore in here, \n    in order to check if can change the data live when \n    something new is happening in the blockchain*/\n    },[]) \n    const option = {\n        grid: {\n            top: '10%',\n            bottom: '10%',\n            left: '5%',\n            right: '5%',\n        },\n        legend: {\n            itemGap: 20,\n            icon: 'circle',\n            textStyle: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            type: 'category',\n            data: ourDays,\n            // data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 14,\n                fontFamily: 'roboto',\n            },\n        },\n        yAxis: {\n            type: 'value',\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            splitLine: {\n                // show: false\n                lineStyle: {\n                    color: theme.palette.text.secondary,\n                    opacity: 0.15,\n                },\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        series: [\n            {\n                // data: [20, 50, 15, 50, 30, 70, 95],\n                data: stakeCreatedSum,\n                type: 'line',\n                stack: 'Stakes Created',\n                name: 'Stakes Created',\n                smooth: true,\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            },\n            {\n                // data: [30, 40, 20, 50, 40, 80, 90],\n                data: stakeRemovedSum,\n                // data: ourDays,\n                type: 'line',\n                stack: 'Stakes Removed',\n                name: 'Stakes Removed',\n                smooth: true,\n                color: 'yellow',\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            }\n        ],\n    }\n\n    return (\n        <ReactEcharts\n            style={{ height: height }}\n            option={{\n                ...option,\n                color: [...color],\n            }}\n        />\n    )\n})\n\nexport default LineChartTotalStakePerDay\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from 'app/hooks/useStore'\nimport { convertToDate } from 'app/utils/convertToDate'\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/fr';\n\nimport { useTheme } from '@mui/system'\nimport ReactEcharts from 'echarts-for-react'\n\n\n\nconst ComparisonChartTotalStakePerDay = observer(({ height, color = [] }) => {\n    const dataStore = useStore()\n    const theme = useTheme()\n    const [ourDays, setOurDays] = useState([]);\n    const [stakeCreatedSum, setStakeCreatedSum] = useState([]);\n    const [stakeRemovedSum, setStakeRemovedSum] = useState([]);\n\n    useEffect(() => { \n        const getData = async () => {\n            await dataStore.fetchStakesPerDayData() //TODO pass startDate and endDate here as paramters.\n            let days = [];\n            let stakeCreatedSumArr = [];\n            let stakeRemovedSumArr = [];\n            for (let index = 0; index < dataStore.stakesPerDayData.length; index++) {\n              const element = dataStore.stakesPerDayData[index];\n              const newDate = convertToDate(parseInt(element.dayId));\n              const convertedStakeCreatedSum = ethers.utils.formatEther(element.stakeCreatedSum)\n              const ourStakeCreatedSum = Number(convertedStakeCreatedSum).toFixed(2)\n              const convertedStakeRemovedSum = ethers.utils.formatEther(element.stakeRemovedSum)\n              const ourStakeRemovedSum = Number(convertedStakeRemovedSum).toFixed(2)\n          \n              days.push(moment(newDate).format(\"L\"));\n              stakeCreatedSumArr.push(ourStakeCreatedSum)\n              stakeRemovedSumArr.push(ourStakeRemovedSum)\n            }\n            setOurDays(days)\n            setStakeCreatedSum(stakeCreatedSumArr)\n            setStakeRemovedSum(stakeRemovedSumArr)\n        }\n        getData()\n    /* we have to think about putting dataStore in here, \n    in order to check if can change the data live when \n    something new is happening in the blockchain*/\n    },[]) \n    const option = {\n        grid: {\n            top: '10%',\n            bottom: '10%',\n            left: '5%',\n            right: '5%',\n        },\n        legend: {\n            itemGap: 20,\n            icon: 'circle',\n            textStyle: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            type: 'category',\n            data: ourDays,\n            // data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 14,\n                fontFamily: 'roboto',\n            },\n        },\n        yAxis: {\n            type: 'value',\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            splitLine: {\n                // show: false\n                lineStyle: {\n                    color: theme.palette.text.secondary,\n                    opacity: 0.15,\n                },\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        series: [\n            {\n                // data: [20, 50, 15, 50, 30, 70, 95],\n                data: stakeCreatedSum,\n                type: 'bar',\n                stack: 'Stakes Created',\n                name: 'Stakes Created',\n                smooth: true,\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            },\n            {\n                // data: [30, 40, 20, 50, 40, 80, 90],\n                data: stakeRemovedSum,\n                // data: ourDays,\n                type: 'bar',\n                stack: 'Stakes Removed',\n                name: 'Stakes Removed',\n                smooth: true,\n                color: 'yellow',\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            }\n        ],\n    }\n\n    return (\n        <ReactEcharts\n            style={{ height: height }}\n            option={{\n                ...option,\n                color: [...color],\n            }}\n        />\n    )\n})\n\nexport default ComparisonChartTotalStakePerDay\n","import React, { useEffect, useState } from 'react'\nimport { useTheme } from '@mui/system'\nimport ReactEcharts from 'echarts-for-react'\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from 'app/hooks/useStore'\nimport { convertToDate } from 'app/utils/convertToDate'\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/fr';\n\nconst LineChartTotalStakes = observer(({ height, color = [] }) => {\n\n    const dataStore = useStore()\n    const theme = useTheme()\n    const [ourDays, setOurDays] = useState([]);\n    const [totalStakes, setTotalStakes] = useState([]);\n\n    useEffect(() => { \n        const getData = async () => {\n            await dataStore.fetchStakesPerDayData() //TODO pass startDate and endDate here as paramters.\n            let days = [];\n            let totalStakesArr = [];\n\n            for (let index = 0; index < dataStore.stakesPerDayData.length; index++) {\n              const element = dataStore.stakesPerDayData[index];\n              const newDate = convertToDate(parseInt(element.dayId));\n              const convertedTotalStakes = ethers.utils.formatEther(element.totalStake)\n              const ourTotalStakes = Number(convertedTotalStakes).toFixed(2)\n          \n              days.push(moment(newDate).format(\"L\"));\n              totalStakesArr.push(ourTotalStakes)\n            }\n            setOurDays(days)\n            setTotalStakes(totalStakesArr)\n        }\n        getData()\n    /* we have to think about putting dataStore in here, \n    in order to check if can change the data live when \n    something new is happening in the blockchain*/\n    },[]) \n    const option = {\n        grid: {\n            top: '10%',\n            bottom: '10%',\n            left: '5%',\n            right: '5%',\n        },\n        legend: {\n            itemGap: 20,\n            icon: 'circle',\n            textStyle: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            type: 'category',\n            data: ourDays,\n            // data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 14,\n                fontFamily: 'roboto',\n            },\n        },\n        yAxis: {\n            type: 'value',\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            splitLine: {\n                // show: false\n                lineStyle: {\n                    color: theme.palette.text.secondary,\n                    opacity: 0.15,\n                },\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        series: [\n            {\n                // data: [20, 50, 15, 50, 30, 70, 95],\n                data: totalStakes,\n                type: 'line',\n                stack: 'Total Stakes',\n                name: 'Total Stakes',\n                smooth: true,\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            },\n        ],\n    }\n\n    return (\n        <ReactEcharts\n            style={{ height: height }}\n            option={{\n                ...option,\n                color: [...color],\n            }}\n        />\n    )\n})\n\nexport default LineChartTotalStakes\n","import React, { useEffect, useState } from 'react'\nimport { useTheme } from '@mui/system'\nimport ReactEcharts from 'echarts-for-react'\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from 'app/hooks/useStore'\nimport { convertToDate } from 'app/utils/convertToDate'\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/fr';\n\nconst TotalRewardsAndTotalDistributedChart = observer(({ height, color = [] }) => {\n\n    const dataStore = useStore()\n    const theme = useTheme()\n    const [ourDays, setOurDays] = useState([]);\n    const [totalRewards, setTotalRewards] = useState([]);\n    const [totalDistributions, setTotalDistributions] = useState([]);\n\n    useEffect(() => { \n        const getData = async () => {\n            await dataStore.fetchStakesPerDayData() //TODO pass startDate and endDate here as paramters.\n            let days = [];\n            let totalRewardsArr = [];\n            let totalDistributionsArr = [];\n\n            for (let index = 0; index < dataStore.stakesPerDayData.length; index++) {\n              const element = dataStore.stakesPerDayData[index];\n              const newDate = convertToDate(parseInt(element.dayId));\n              const convertedTotalRewards = ethers.utils.formatEther(element.totalRewards)\n              const ourTotalRewards = Number(convertedTotalRewards).toFixed(2)\n              const convertedTotalDistributionsArr = ethers.utils.formatEther(element.totalDistributions)\n              const ourTotalTotalDistributionsArr = Number(convertedTotalDistributionsArr).toFixed(2)\n          \n              days.push(moment(newDate).format(\"L\"));\n              totalRewardsArr.push(ourTotalRewards)\n              totalDistributionsArr.push(ourTotalTotalDistributionsArr)\n            }\n            setOurDays(days)\n            setTotalRewards(totalRewardsArr)\n            setTotalDistributions(totalDistributionsArr)\n        }\n        getData()\n    /* we have to think about putting dataStore in here, \n    in order to check if can change the data live when \n    something new is happening in the blockchain*/\n    },[]) \n    const option = {\n        grid: {\n            top: '10%',\n            bottom: '10%',\n            left: '5%',\n            right: '5%',\n        },\n        legend: {\n            itemGap: 20,\n            icon: 'circle',\n            textStyle: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            type: 'category',\n            data: ourDays,\n            // data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 14,\n                fontFamily: 'roboto',\n            },\n        },\n        yAxis: {\n            type: 'value',\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            splitLine: {\n                // show: false\n                lineStyle: {\n                    color: theme.palette.text.secondary,\n                    opacity: 0.15,\n                },\n            },\n            axisLabel: {\n                color: theme.palette.text.secondary,\n                fontSize: 13,\n                fontFamily: 'roboto',\n            },\n        },\n        series: [\n            {\n                // data: [20, 50, 15, 50, 30, 70, 95],\n                data: totalRewards,\n                type: 'line',\n                stack: 'Total Rewards',\n                name: 'Total Rewards',\n                smooth: true,\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            },\n            {\n                // data: [20, 50, 15, 50, 30, 70, 95],\n                data: totalDistributions,\n                type: 'line',\n                stack: 'Total Distributions',\n                name: 'Total Distributions',\n                smooth: true,\n                symbolSize: 4,\n                lineStyle: {\n                    width: 4,\n                },\n            },\n        ],\n    }\n\n    return (\n        <ReactEcharts\n            style={{ height: height }}\n            option={{\n                ...option,\n                color: [...color],\n            }}\n        />\n    )\n})\n\nexport default TotalRewardsAndTotalDistributedChart\n","import React from 'react'\nimport LineChartTotalStakePerDay from './LineChartTotalStakePerDay'\nimport { useTheme, Box, styled } from '@mui/system'\nimport ComparisonChartTotalStakePerDay from './ComparisonChartTotalStakePerDay'\nimport SimpleCard from 'app/components/cards/SimpleCard'\nimport Breadcrumb from 'app/components/Breadcrumb/Breadcrumb'\nimport LineChartTotalStakes from './LineChartTotalStakes'\nimport TotalRewardsAndTotalDistributedChart from './TotalRewardsAndTotalDistributedChart'\n\nconst Container = styled('div')(({ theme }) => ({\n    margin: '30px',\n    [theme.breakpoints.down('sm')]: {\n        margin: '16px',\n    },\n    '& .breadcrumb': {\n        marginBottom: '30px',\n        [theme.breakpoints.down('sm')]: {\n            marginBottom: '16px',\n        },\n    },\n}))\n\nconst MelaliePerDayChart = () => {\n    const theme = useTheme()\n    return (\n        <Container>\n            <div className=\"breadcrumb\">\n                <Breadcrumb\n                    routeSegments={[\n                        { name: 'Charts', path: '/charts' },\n                        { name: 'Melalie Per Day' },\n                    ]}\n                />\n            </div>\n\n            <Box sx={{ py: '12px' }} />\n            <SimpleCard title=\"TotalStakes\">\n                <LineChartTotalStakes\n                    height=\"350px\"\n                    color={[\n                        theme.palette.primary.dark,\n                        // theme.palette.primary.main,\n                        theme.palette.primary.light,\n                    ]}\n                />\n            </SimpleCard>\n            <Box sx={{ py: '12px' }} />\n            <SimpleCard title=\"TotalRewards And TotalDistributions\">\n                <TotalRewardsAndTotalDistributedChart\n                    height=\"350px\"\n                    color={[\n                        theme.palette.primary.dark,\n                        // theme.palette.primary.main,\n                        theme.palette.primary.light,\n                    ]}\n                />\n            </SimpleCard>\n\n            <Box sx={{ py: '12px' }} />\n            <SimpleCard title=\"Total Stake Created and Removed per day\">\n                <LineChartTotalStakePerDay\n                    height=\"350px\"\n                    color={[\n                        theme.palette.primary.main,\n                        theme.palette.primary.light,\n                    ]}\n                />\n            </SimpleCard>\n            <Box sx={{ py: '12px' }} />\n            <SimpleCard title=\"Comparison between Stake Created and Stake Removed\">\n                <ComparisonChartTotalStakePerDay\n                    height=\"350px\"\n                    color={[\n                        theme.palette.primary.dark,\n                        // theme.palette.primary.main,\n                        theme.palette.primary.light,\n                    ]}\n                />\n            </SimpleCard>\n        </Container>\n    )\n}\n\nexport default MelaliePerDayChart\n"],"sourceRoot":""}